"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')2&_ei96x)cccv&!868jfxqop^h&1481s46u5#%x=37brw_-s)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # myapp 
    'courses',
    'students',

    # third party
    'embed_video',
    'memcache_status',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # if you want to cache your entire site so add line bellow to your middleare
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # also this line for caching
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media/"

from django.urls import reverse_lazy
LOGIN_REDIRECT_URL = reverse_lazy('students:student_course_list')


# using the cache framework 
    # try to find the requested data in cache 
    # i found  return the cache data 
    # if not:
        # perform the query or processing the required to obtain the data
        # save the generated data in cache 
        # return data 


# django backend cache 
    # backend.Memcached
    # backend.db.DatabaseChase
    # backend.filebased.FileBasedCache
    # backends.locmem.LocMemCache ---> local memory cache backend
    # backend.dummy.DummyCache ---> it's only intended for development 
    # also you can use redis --> which instagram using it right now

# install memcache from this source:
# https://memcached.org/downloads

# for me i use linux so here is the way:
# sudo apt install memcached
# sudo apt install libmemcached-tools

#       CACHE SETTINGS
# CACHES
# CACHES_MIDDLEWARE_ALIAS
# CACHES_MIDDLEWARE_KEY_PERFIX
# CACHES_MIDDLEWARE_SECONDS

#           cache dictionary
# BACKEND 
# KEY_FUNCTION
# KEY_PERFIX
# LOCATION
# OPTIONS
# TIMEOUT


#       CACHE LEVELS 
#  Low level cache API  ---> it's provide the hights, alow you to cache specific queries or calculations
# pre-view cache -----> provide cacheing for individual views
# template cache --->  alow you to cache template fragments
# per site cache ----> the highest level cache which cache your entire site

#           STORING OBJECT IN CACHE 
# from django.core.cache import caches
# my_cache = caches['alias']

#for example i can do some example --> then open  `python manage.py shell` and execute the following commands:
    # from django.core.cache import cache
    # cache.set('musician', 'Django Reinhardt', 20)
    # cache.get('musician')
    # cache.get('musician')

    # or 
    # from courses.modles import Subject 
    # subjects = Subject.objects.all()
    # cache.set('all_subjects', subjects)
    # cache.get('all_subjects')

#       USING TEMPLATE TAG
#  {% cache 300 fragment_name %}
# .......
# {% endcache %}

# {% load cache %}
# {% cache %}



CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

# whn you added cache to entire site so add this sitting after you added to your middleware
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes which is the timeout
CACHE_MIDDLEWARE_KEY_PREFIX = 'config'
# my site right now cache all my site which has a get request


# django restframework
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

#   REST FRAMEWOK AUTHENTICATION BACKENDS 
# BASIC AUTHENTICATION:
    # user and password send by client 
    # encoded by base 64
# TOKEN AUTHENTICATION:
    # Token model used to store user token 
    # Tokens included in Authorization HTTP header
# SESSION AUTHENTICATION:
    # IT'S user django session backend 
    # this is usefull when you are gonna perform authenticated ajax request to teh API
